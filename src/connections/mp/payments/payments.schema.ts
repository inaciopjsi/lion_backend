import * as mongoose from 'mongoose';

export const PaymentSchema: mongoose.Schema = new mongoose.Schema(
  {
    order_id: Number,
    date_created: Date,
    date_approved: Date,
    date_last_updated: Date,
    date_of_expiration: Date,
    money_release_date: Date,
    operation_type: String,
    issuer_id: String,
    payment_method_id: String,
    payment_type_id: String,
    payment_method: {
      id: String,
      type: String,
      issuer_id: String,
      data: {
        routing_data: {
          merchant_account_id: String,
        },
        rules: {
          discounts: [
            {
              type: String,
              value: Number,
              limit_date: Date,
            },
          ],
          fine: {
            type: String,
            value: Number,
          },
          interest: {
            type: String,
            value: Number,
          },
        },
      },
    },
    status: String,
    status_detail: String,
    currency_id: String,
    description: String,
    live_mode: Boolean,
    sponsor_id: String,
    authorization_code: String,
    integrator_id: String,
    money_release_schema: String,
    money_release_status: String,
    taxes_amount: Number,
    counter_currency: String,
    shipping_amount: Number,
    build_version: String,
    pos_id: String,
    store_id: String,
    collector_id: Number,
    platform_id: String,
    corporation_id: String,
    payer: {
      id: Number,
      email: String,
      identification: {
        number: String,
        type: String,
      },
      type: String,
    },
    charges_details: [
      {
        id: String,
        name: String,
        type: String,
        accounts: {
          from: String,
          to: String,
        },
        client_id: Number,
        date_created: Date,
        last_updated: Date,
        amounts: {
          original: Number,
          refunded: Number,
        },
        metadata: Object,
        reserve_id: String,
        refund_charges: [Object],
      },
    ],
    metadata: Object,
    additional_info: {
      ip_address: String,
      items: [
        {
          id: String,
          title: String,
          description: String,
          picture_url: String,
          category_id: String,
          quantity: Number,
          currency_id: String,
          unit_price: Number,
        },
      ],
      payer: {
        first_name: String,
        last_name: String,
        phone: {
          area_code: String,
          number: String,
          extension: String,
        },
        address: {
          zip_code: String,
          street_name: String,
          street_number: String,
        },
        registration_date: Date,
      },
      shipments: {
        receiver_address: {
          floor: String,
          apartment: String,
          street_name: String,
          street_number: Number,
          zip_code: String,
          city_name: String,
          state_name: String,
        },
      },
    },
    order: {
      id: Number,
      type: String,
    },
    external_reference: String,
    transaction_amount: Number,
    transaction_amount_refunded: Number,
    coupon_amount: Number,
    differential_pricing_id: String,
    deduction_schema: String,
    transaction_details: {
      payment_method_reference_id: String,
      acquirer_reference: String,
      net_received_amount: Number,
      total_paid_amount: Number,
      overpaid_amount: Number,
      external_resource_url: String,
      installment_amount: Number,
      financial_institution: String,
      payable_deferral_period: Object,
      transaction_id: String,
      barcode: {
        content: String,
      },
      digitable_line: String,
      verification_code: String,
      bank_transfer_id: String,
    },
    fee_details: [
      {
        type: String,
        amount: Number,
        fee_payer: String,
      },
    ],
    captured: Boolean,
    binary_mode: Boolean,
    call_for_authorize_id: String,
    statement_descriptor: String,
    installments: Number,
    card: {
      id: String,
      first_six_digits: String,
      last_four_digits: String,
      bin: String,
      expiration_month: Number,
      expiration_year: Number,
      date_created: Date,
      date_last_updated: Date,
      cardholder: {
        name: String,
        identification: {
          number: String,
          type: String,
        },
      },
    },
    refunds: [
      {
        id: Number,
        payment_id: Number,
        amount: Number,
        metadata: Object,
        source: {
          id: String,
          name: String,
          type: String,
        },
        date_created: Date,
        unique_sequence_number: String,
        refund_mode: String,
        adjustment_amount: Number,
        status: String,
        reason: String,
        amount_refunded_to_payer: Number,
      },
    ],
    notification_url: String,
    processing_mode: String,
    merchant_account_id: String,
    acquirer: String,
    merchant_number: String,
    point_of_interaction: {
      type: String,
      sub_type: String,
      application_data: {
        name: String,
        version: String,
      },
      transaction_data: {
        qr_code_base64: String,
        qr_code: String,
        bank_transfer_id: Number,
        financial_institution: Number,
        bank_info: {
          payer: {
            email: String,
            account_id: Number,
            long_name: String,
          },
          collector: {
            account_id: Number,
            long_name: String,
          },
          is_same_bank_account_owner: String,
        },
        ticket_url: String,
      },
      business_info: {
        unit: String,
        sub_unit: String,
      },
    },
    three_ds_info: {
      external_resource_url: String,
      creq: String,
    },
    callback_url: String,
    coupon_code: String,
    net_amount: Number,
    payment_method_option_id: String,
    taxes: [
      {
        type: String,
        value: Number,
      },
    ],
    internal_metadata: Object,
    createdAt: Date,
    updatedAt: Date,
  },
  {
    strict: true,
    strictQuery: false,
  },
);
